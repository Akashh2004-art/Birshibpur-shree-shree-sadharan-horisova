import { Request, Response } from "express";
import { parsePhoneNumberFromString } from "libphonenumber-js";
import admin from "firebase-admin";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import User from "../models/userModel";
import { createSignupNotification } from "./notificationController";

// Initialize Firebase Admin if not already initialized
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.FIREBASE_PROJECT_ID,
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, "\n"),
    }),
  });
}

// ‚úÖ Check if phone number exists in the database
export const checkPhoneNumber = async (req: Request, res: Response) => {
  const { phone } = req.body;

  // ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶®
  if (!phone) {
    return res.status(400).json({ success: false, message: "‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞" });
  }

  try {
    // ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶® (libphonenumber-js ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá)
    const parsedPhone = parsePhoneNumberFromString(phone, 'IN');
    if (!parsedPhone || !parsedPhone.isValid()) {
      return res.status(400).json({ success: false, message: "‡¶Ö‡¶¨‡ßà‡¶ß ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶≠‡¶æ‡¶∞‡¶§‡ßá‡¶∞ 10 ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ (+91 ‡¶∏‡¶π) ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§" });
    }

    const normalizedPhone = parsedPhone.number;

    // ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
    const user = await User.findOne({ phone: normalizedPhone });
    res.json({ success: true, exists: !!user });
  } catch (error) {
    res.status(500).json({ success: false, message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" });
  }
};
export const validatePhoneNumber = checkPhoneNumber;

// üöÄ UPDATED: Complete Signup with Phone Number - Remove default fields
export const completeSignup = async (req: Request, res: Response) => {
  try {
    const { phone, password } = req.body;
    if (!phone || !password) {
      return res
        .status(400)
        .json({ success: false, message: "‡¶´‡ßã‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    // üöÄ FIXED: Only essential fields, no default role/status/religion
    const newUser = new User({
      phone: `+91${phone}`,
      password: hashedPassword,
      authProvider: 'phone',
      isVerified: false
    });

    await newUser.save();
    
    // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
    await createSignupNotification(`+91${phone}`);
    
    res.json({
      success: true,
      message: "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
    });
  } catch (error) {
    res.status(500).json({ success: false, message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" });
  }
};

// üöÄ UPDATED: Google Sign Up / Sign In - Remove default fields
export const googleSignUp = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const idToken = req.headers.authorization?.split("Bearer ")[1];

    if (!idToken) {
      res.status(400).json({ success: false, message: "ID ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®" });
      return;
    }

    const decodedToken = await admin.auth().verifyIdToken(idToken);
    const { email, name = "", uid, picture } = decodedToken;

    if (!email) {
      res.status(400).json({ success: false, message: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï" });
      return;
    }

    let user = await User.findOne({ email });

    if (user) {
      const token = jwt.sign(
        { id: user._id },
        process.env.JWT_SECRET || "akashsaha0751",
        { expiresIn: "365d" } // 1 ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßà‡¶ß ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
      );

      res.status(200).json({
        success: true,
        user: {
          _id: user._id,
          name: user.name,
          email: user.email,
          phone: user.phone || '',
        },
        token,
        needsPassword: !user.password,
      });
    } else {
      res.status(200).json({
        success: true,
        tempUser: {
          name: name || email.split("@")[0],
          email,
          firebaseUID: uid,
          photoURL: picture,
        },
        needsPassword: true,
      });
    }
  } catch (error: any) {
    console.error("‚ùå Google ‡¶∏‡¶æ‡¶á‡¶® ‡¶Ü‡¶™ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
    res
      .status(500)
      .json({ success: false, message: error.message || "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ" });
  }
};

// üöÄ UPDATED: Complete Google Sign Up - Remove default fields
export const completeGoogleSignUp = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { name, email, firebaseUID, photoURL, password, phone } = req.body;

    if (!email || !password) {
      res
        .status(400)
        .json({ success: false, message: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ì ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï" });
      return;
    }
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      res
        .status(400)
        .json({ success: false, message: "‡¶è‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶ø‡¶§" });
      return;
    }
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    
    // üöÄ FIXED: Only essential fields, no default role/status/religion
    const newUser = await User.create({
      name: name || email.split("@")[0],
      email,
      firebaseUID,
      photoURL,
      phone,
      password: hashedPassword,
      authProvider: "google",
      isVerified: true
    });
    
    // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
    await createSignupNotification(email);
    
    const token = jwt.sign(
      { id: newUser._id },
      process.env.JWT_SECRET || "akashsaha0751",
      { expiresIn: "365d" } // 1 ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßà‡¶ß ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
    );
    
    res.status(201).json({
      success: true,
      user: {
        _id: newUser._id,
        name: newUser.name,
        email: newUser.email,
        phone: newUser.phone,
      },
      token,
      message: "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
    });
  } catch (error: any) {
    console.error("‚ùå Google ‡¶∏‡¶æ‡¶á‡¶® ‡¶Ü‡¶™ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
    res
      .status(500)
      .json({ success: false, message: error.message || "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ" });
  }
};

// ‚úÖ Set Password
export const setPassword = async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res
        .status(400)
        .json({ success: false, message: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ì ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï" });
    }
    const user = await User.findOne({ email });
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø" });
    }
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(password, salt);
    await user.save();
    return res
      .status(200)
      .json({ success: true, message: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá" });
  } catch (error) {
    console.error("‚ùå ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
    return res.status(500).json({ success: false, message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" });
  }
};

// ‚úÖ User Login
export const login = async (req: Request, res: Response) => {
  try {
    const { identifier, password } = req.body;

    console.log("üì¢ ‡¶á‡¶Ø‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü (RAW):", {
      identifier,
      hasPassword: !!password,
    });

    if (!identifier || !password) {
      return res
        .status(400)
        .json({
          success: false,
          message: "‡¶Ü‡¶á‡¶°‡ßá‡¶®‡ßç‡¶ü‡¶ø‡¶´‡¶æ‡¶Ø‡¶º‡¶æ‡¶∞ (‡¶á‡¶Æ‡ßá‡¶á‡¶≤/‡¶´‡ßã‡¶®) ‡¶è‡¶¨‡¶Ç ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞",
        });
    }

    const trimmedIdentifier = identifier.trim();
    console.log("üì¢ ‡¶á‡¶Ø‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü (TRIMMED):", {
      identifier: trimmedIdentifier,
      hasPassword: !!password,
    });

    let user;
    if (trimmedIdentifier.includes("@")) {
      user = await User.findOne({ email: trimmedIdentifier }).select("+password");
    } else {
      let normalizedPhone = trimmedIdentifier;
      normalizedPhone = normalizedPhone
        .replace(/^\+91/, "")
        .replace(/^\+/, "")
        .replace(/^\s+/, "");
      if (!normalizedPhone.startsWith("+91")) {
        normalizedPhone = `+91${normalizedPhone}`;
      }
      console.log("üì¢ ‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡¶° ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:", normalizedPhone);
      user = await User.findOne({ phone: normalizedPhone }).select("+password");
    }

    if (!user) {
      console.log("‚ùå ‡¶á‡¶Ø‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø:", trimmedIdentifier);
      return res
        .status(401)
        .json({ success: false, message: "‡¶á‡¶Ø‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø" });
    }

    console.log(
      "üì¢ ‡¶á‡¶Ø‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá, ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°:",
      user.password ? "Set" : "Not Set"
    );

    if (!user.password || user.password === "") {
      console.log("‚ùå ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á:", trimmedIdentifier);
      return res
        .status(401)
        .json({ success: false, message: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.log("‚ùå ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡¶ø‡¶≤‡¶õ‡ßá ‡¶®‡¶æ:", trimmedIdentifier);
      return res
        .status(401)
        .json({ success: false, message: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡¶ø‡¶≤‡¶õ‡ßá ‡¶®‡¶æ" });
    }

    const token = jwt.sign(
      { id: user._id, identifier: user.email || user.phone, role: user.role },
      process.env.JWT_SECRET || "akashsaha0751",
      { expiresIn: "365d" }
    );

    res.json({
      success: true,
      token,
      user: {
        id: user._id,
        email: user.email,
        phone: user.phone,
        name: user.name,
      },
    });
  } catch (error) {
    console.error("‚ùå ‡¶á‡¶Ø‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶è‡¶∞‡¶∞:", error);
    res.status(500).json({ success: false, message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ" });
  }
};

export const logout = async (req: Request, res: Response) => {
  try {
    const token = req.headers.authorization?.split('Bearer ')[1];
    if (!token) {
      return res.status(401).json({ success: false, message: '‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®' });
    }

    // ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    jwt.verify(token, process.env.JWT_SECRET || 'akashsaha0751');
    
    // ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶¨‡¶æ ‡¶á‡¶®‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)
    res.json({ success: true, message: '‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' });
  } catch (error) {
    console.error('‚ùå ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶è‡¶∞‡¶∞:', error);
    if (error instanceof jwt.JsonWebTokenError) {
      return res.status(401).json({ success: false, message: '‡¶≠‡ßÅ‡¶≤ ‡¶ü‡ßã‡¶ï‡ßá‡¶®' });
    }
    res.status(500).json({ success: false, message: '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ' });
  };
};

// ‚úÖ Get All Users (‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶æ‡¶∞)
export const getAllUsers = async (req: Request, res: Response) => {
  try {
    const users = await User.find()
      .select('name email phone role status createdAt') // ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü
      .sort({ createdAt: -1 }); // ‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ success: false, message: '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø', error });
  }
};